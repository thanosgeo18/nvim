# Global python scripts
global !p

def math():
  return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def not_math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '0'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')")
	return x != '0' and y != '0'
	# Use backticks when calling: e.g. env('itemize')

def trailing_space_inline(t,n):
	if t[n] and t[n][0] not in [',', '.', '?', '-', ' ']:
		return ' '
	else:
		return ''

import re
def trailing_space_letter(t,n):
	if t[n] and re.match(r'[a-zA-Zα-ωΑ-Ω]', t[n][0]):
		return ' '
	else:
		return ''

def trailing_space(t,n):
	if t[n] and t[n][0] not in [' ']:
		return ' '
	else:
		return ''

endglobal

# [[ Sub- & Superscripts ]]

context "math()"
snippet _ "subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

# context "math()"
# snippet '([A-Za-z])([A-Za-z]{2})' "auto single subscript" wrA
# `!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
# endsnippet

context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet '(\s)?(tp|\^)' "superscript" riA
^{$1}$0
endsnippet

context "math()"
snippet sr "^2" iA
^2 $0
endsnippet

context "math()"
snippet cb "^3" iA
^3 $0
endsnippet

context "math()"
snippet comp "[comp]lement" iA
^{c} $0
endsnippet

context "math()"
snippet inv "[inv]erse" iA
^{-1} $0
endsnippet

context "math()"
snippet conj "[conj]ugate (^*)" iA
^{*} $0
endsnippet

# [[ Fractions ]]

priority 10
context "math()"
snippet // "Fraction" iA
\\frac\{${1:${VISUAL}}\}\{$2\}$0
endsnippet

priority 5
context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac\{`!p snip.rv = match.group(1)`\}\{$1\}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`\{$1\}$0
endsnippet

# priority 0
# context "math()"
# snippet / "Fraction" iA
# \\frac{${VISUAL}}{$1}$0
# endsnippet

# [[ Postfix Snippets ]]

priority 10

context "math()"
snippet \hat "hat" iA
\\hat\{$1\}
endsnippet

context "math()"
snippet \bar "overline" iA
\\overline\{$1\}
endsnippet

context "math()"
snippet \dot "dot" iA
\\dot\{$1\}
endsnippet

context "math()"
snippet \ddot "ddot" iA
\\ddot\{$1\}
endsnippet

context "math()"
snippet \tilde "tilde" iA
\\tilde\{$1\}
endsnippet

context "math()"
snippet \und "underline" iA
\\underline\{$1\}
endsnippet

priority 100

context "math()"
snippet '([A-Za-z]),\.' "vec" riA
\\vec\{`!p snip.rv = match.group(1)`\}
endsnippet

context "math()"
snippet '([A-Za-z])\.,' "vec" riA
\\vec\{`!p snip.rv = match.group(1)`\}
endsnippet

context "math()"
snippet '([A-Za-z])hat' "hat" riA
\\hat\{`!p snip.rv = match.group(1)`\}
endsnippet

context "math()"
snippet '([A-Za-z])bar' "overline" riA
\\overline\{`!p snip.rv = match.group(1)`\}
endsnippet

context "math()"
snippet '([A-Za-z])dot' "dot" riA
\\dot\{`!p snip.rv = match.group(1)`\}
endsnippet

context "math()"
snippet '([A-Za-z])ddot' "ddot" riA
\\ddot\{`!p snip.rv = match.group(1)`\}
endsnippet

context "math()"
snippet '([A-Za-z])tilde' "tilde" riA
\\tilde\{`!p snip.rv = match.group(1)`\}
endsnippet

context "math()"
snippet '([A-Za-z])und' "underline" riA
\\underline\{`!p snip.rv = match.group(1)`\}
endsnippet

priority 200

context "math()"
snippet '(\\[A-Za-z]+),\.' "vec" riA
\\vec\{`!p snip.rv = match.group(1)`\}
endsnippet

context "math()"
snippet '(\\[A-Za-z]+)\.,' "vec" riA
\\vec\{`!p snip.rv = match.group(1)`\}
endsnippet

context "math()"
snippet '(\\[A-Za-z]+)\s?hat' "hat" riA
\\hat\{`!p snip.rv = match.group(1)`\}
endsnippet

context "math()"
snippet '(\\[A-Za-z]+)\s?bar' "overline" riA
\\overline\{`!p snip.rv = match.group(1)`\}
endsnippet

context "math()"
snippet '(\\[A-Za-z]+)\s?dot' "dot" riA
\\dot\{`!p snip.rv = match.group(1)`\}
endsnippet

context "math()"
snippet '(\\[A-Za-z]+)\s?ddot' "ddot" riA
\\ddot\{`!p snip.rv = match.group(1)`\}
endsnippet

context "math()"
snippet '(\\[A-Za-z]+)\s?tilde' "tilde" riA
\\tilde\{`!p snip.rv = match.group(1)`\}
endsnippet

context "math()"
snippet '(\\[A-Za-z]+)\s?und' "underline" riA
\\underline\{`!p snip.rv = match.group(1)`\}
endsnippet

# [[ Brackets ]]

priority 0
context "math()"
snippet ang "angle brackets" wA
\\langle $1 \\rangle`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "math()"
snippet abs "absolute value" wA
\\lvert $1 \\rvert`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "math()"
snippet norm "norm" wA
\\lVert $1 \\rVert`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "math()"
snippet ceil "ceiling" wA
\\lceil $1 \\rceil`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "math()"
snippet floor "floor" wA
\\lfloor $1 \rfloor`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "math()"
snippet lr( "left-right round brackets" wA
\\left( ${1:${VISUAL}} \\right) $0
endsnippet

context "math()"
snippet lr{ "left-right angle brackets" wA
\\left\{ ${1:${VISUAL}} \\right\} $0
endsnippet

context "math()"
snippet lr[ "left-right square brackets" wA
\\left[ ${1:${VISUAL}} \\right] $0
endsnippet

# [[ Linear algebra  ]]

context "math()"
snippet '(?<!\\)(det)' "det -> \det" rwA
\\`!p snip.rv = match.group(1)`($1)
endsnippet

context "math()"
snippet trace "trace" wA
\\mathrm\{tr\}
endsnippet

context "math()"
snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${3:n} \end{pmatrix}
endsnippet

# [[ Common Functions ]]

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|tan|cot|csc|sec|ln|log|exp)' "function -> \function" rwA
\\`!p snip.rv = match.group(1)`($1)
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi)' "function -> \function" rwA
\\`!p snip.rv = match.group(1)`($1)
endsnippet

# [[ Math Fonts ]]

priority 0
context "math()"
snippet mbf "mathbf" wA
\\mathbf\{$1\}
endsnippet

context "math()"
snippet mrm "mathrm" wA
\\mathrm\{$1\}
endsnippet

context "math()"
snippet mbb "mathbb" wA
\\mathbb\{$1\}
endsnippet

context "math()"
snippet mcal "mathcal" wA
\\mathcal\{$1\}
endsnippet

context "math()"
snippet mfrak "mathfrak" wA
\\mathfrak\{$1\}
endsnippet

context "math()"
snippet mscr "mathsct" wA
\\mathscr\{$1\}
endsnippet

## Common Stylized Letters

context "math()"
snippet RR "\R" iA
\\R`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "math()"
snippet NN "\N" iA
\\N`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "math()"
snippet CC "\C" iA
\\C`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "math()"
snippet QQ "\Q" iA
\\Q`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "math()"
snippet HH "H" iA
\\H`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "math()"
snippet DD "D" iA
\\D`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "math()"
snippet SS "\S" iA
\\S`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "math()"
snippet LL "\L" iA
\\L`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "math()"
snippet XX "\X" iA
\\X`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

# [[ Symbols ]]

priority 10
context "math()"
snippet lll "ell" iA
\\ell`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "math()"
snippet ... "ldots" iA
\\ldots $0
endsnippet

## Equivalence, Inequalities & Implications

priority 0
context "math()"
snippet isom "isomorphic" wA
\\cong 
endsnippet

context "math()"
snippet sim "similar to" wA
\\sim`!p snip.rv = trailing_space(t,0)`$0
endsnippet

context "math()"
snippet iff "iff" wA
\\iff`!p snip.rv = trailing_space(t,0)`$0
endsnippet

context "math()"
snippet => "implies" wA
\\implies`!p snip.rv = trailing_space(t,0)`$0
endsnippet

context "math()"
snippet =< "implied by" wA
\\impliedby`!p snip.rv = trailing_space(t,0)`$0
endsnippet

context "math()"
snippet deq "defining equality" wA
\\doteq`!p snip.rv = trailing_space(t,0)`$0
endsnippet

context "math()"
snippet neq "!=" wA
\\neq`!p snip.rv = trailing_space(t,0)`$0
endsnippet

context "math()"
snippet leq "<=" wA
\\leq`!p snip.rv = trailing_space(t,0)`$0
endsnippet

context "math()"
snippet geq ">=" wA
\\geq`!p snip.rv = trailing_space(t,0)`$0
endsnippet

context "math()"
snippet >> ">>" wA
\gg`!p snip.rv = trailing_space(t,0)`$0
endsnippet

context "math()"
snippet << "<<" wA
\ll`!p snip.rv = trailing_space(t,0)`$0
endsnippet

## Sets & Logic

context "math()"
snippet EE "exists" iA
(\\exists $1)$0
endsnippet

context "math()"
snippet AA "for all" iA
(\\forall $1)$0
endsnippet

context "math()"
snippet set "\{ \}" wA
\\\{ $1 \\\}
endsnippet

context "math()"
snippet inn "in" iA
\\in`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "math()"
snippet nni "ni" iA
\\ni`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "math()"
snippet notin "not in " iA
\\not\\in`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "math()"
snippet || "mid" iA
\\mid`!p snip.rv = trailing_space(t,0)`$0
endsnippet

context "math()"
snippet OO "empty set" wA
\\emptyset`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "math()"
snippet uu "cup" wA
\\cup`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "math()"
snippet nn "cap" wA
\\cap`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "math()"
snippet cup "beg cup" wA
\\bigcup_\{${1:i=1}\}^\{${2:\infty}\}`!p snip.rv = trailing_space(t,0)`$0
endsnippet

context "math()"
snippet cap "big cap" wA
\\bigcap_\{${1:i=1}\}^\{${2:\infty}\}`!p snip.rv = trailing_space(t,0)`$0
endsnippet

context "math()"
snippet cc "subset" wA
\\subseteq`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "math()"
snippet \\\ "setminus" iA
\\setminus`!p snip.rv = trailing_space(t,0)`$0
endsnippet

## Functions & Maps

context "math()"
snippet to "\to" wA
\\to 
endsnippet

context "math()"
snippet maps "\mapsto" wA
\\mapsto 
endsnippet

context "math()"
snippet ff "function definition" wA
${1:f} \\colon ${2:M} \\to ${3:\\R}
endsnippet

## Operations

context "math()"
snippet +- "plus-minus" iA
\\pm`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "math()"
snippet -+ "minus-plus" iA
\\mp`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

priority 20
context "math()"
snippet '(?<!i)cdot' "\cdot" riA
\\cdot`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

priority 0
context "math()"
snippet xx "cross" iA
\\times`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

priority 10
context "math()"
snippet oxx "otimes" iA
\\otimes`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

priority 0
context "math()"
snippet o+ "oplus" iA
\\oplus`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "math()"
snippet sum "sum" wA
\\sum_\{${1:k=1}\}^\{${2:\infty}\} ${3:${VISUAL}} $0
endsnippet

context "math()"
snippet prod "product" wA
\\prod_\{${1:n=${2:1}}\}^\{${3:\infty}\} ${4:${VISUAL}} $0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\\sqrt\{${1:${VISUAL}}\} $0
endsnippet

## Calculus

context "math()"
snippet taylor "taylor" wA
\\sum_\{${1:k}=${2:0}\}^\{${3:\infty}\} ${4:c_$1} (x-a)^$1 $0
endsnippet

context "math()"
snippet "lim " "limit" wrA
\\lim_\{${1:n} \\to ${2:\infty}\} ${3:${VISUAL}} $0
endsnippet

context "math()"
snippet limsup "limsup" wA
\\limsup_\{${1:n} \\to ${2:\infty}\} ${3:${VISUAL}} $0
endsnippet

context "math()"
snippet liminf "liminf" wA
\\liminf_\{${1:n} \\to ${2:\infty}\} ${3:${VISUAL}} $0
endsnippet

context "math()"
snippet ooo "\infty" iA
\\infty
endsnippet

context "math()"
snippet seq "sequence" iA
(${1:x}_${2:n})_\{${3:$2}\\in${4:\\mathbb\{N\}}\} $0
endsnippet

## Derivatives & Integrals

context "math()"
snippet par "partial (del)" iA
\\partial`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "math()"
snippet nabla "nabla" iA
\\nabla`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "math()"
snippet int "integral" iA
\\int_\{$1\} $0
endsnippet

context "math()"
snippet dint "definite integral" iA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

# [[ Visual Operations ]]

context "math()"
snippet under "underbrace" w
\\underbrace\{ ${VISUAL} \}_\{$1\} 
endsnippet

context "math()"
snippet over "overbrace" w
\\overbrace\{ ${VISUAL} \}^\{$1\} 
endsnippet

context "math()"
snippet cancel "cancel" w
\\cancel\{ ${VISUAL} \} 
endsnippet

context "math()"
snippet cancelto "cancelto" w
\\cancelto\{$1\}\{ ${VISUAL} \} 
endsnippet

context "math()"
snippet color "color" w
\{\\color\{$1\} ${VISUAL} \} 
endsnippet

# [[ Misc ]]

## Automatically turn single letters in text except [A,a,I] into math
## We want this NOT to happen in math mode
context "not_math()"
snippet '([^'])\b([B-HJ-Zb-z])\b([\n\s.,?!:'])' "letter -> math" riA
`!p snip.rv = match.group(1)`\$`!p snip.rv = match.group(2)`\$`!p snip.rv = match.group(3)`
endsnippet

## Automatically turn greek letters in text into math
## We (again) want this NOT to happen in math mode
context "not_math()"
snippet '([^'])\b(alpha|beta|[Gg]amma|[Dd]elta|varepsilon|zeta|eta|[Tt]heta|iota|[Kk]appa|[Ll]ambda)\b([\n\s.,?!:'])' "greek -> math" riA
`!p snip.rv = match.group(1)`\$\\`!p snip.rv = match.group(2)`\$`!p snip.rv = match.group(3)`
endsnippet

context "not_math()"
snippet '([^'])\b(mu|nu|[Xx]i|[Pp]i|rho|[Ss]igma|tau|[Pp]hi|chi|[Pp]si|[Oo]mega)\b([\n\s.,?!:'])' "greek -> math" riA
`!p snip.rv = match.group(1)`\$\\`!p snip.rv = match.group(2)`\$`!p snip.rv = match.group(3)`
endsnippet

# [[ Evaluate math expressions with SymPy ]]

context "math()"
snippet sympy "sympy block " wA
sympy $1 sympy$0
endsnippet

priority 10000
context "math()"
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
rom sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet
