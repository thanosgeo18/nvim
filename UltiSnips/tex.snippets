
# Mandatory for math context to work
global !p

def math():
  return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def not_math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '0'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'
	## Use backticks when calling: e.g. env('itemize')

endglobal

# [[ Document templates ]]

snippet article "Basic template" b
\\documentclass[a4paper]\{article\}
\\input\{../preamble.tex\}

\\begin\{document\}

\\title\{$1\}
\maketitle
\tableofcontents

$0

\\end\{document\}
endsnippet

snippet pac "Package" b
\\usepackage[${1:options}]{${2:package}}$0
endsnippet

context "not_math()"
snippet "sec(\*?)" "section" rb
\\section`!p snip.rv = match.group(1)`\{$1\}

$0
endsnippet

context "not_math()"
snippet "ssec(\*?)" "subsection" rb
\\subsection`!p snip.rv = match.group(1)`\{$1\}

$0
endsnippet

context "not_math()"
snippet "sssec(\*?)" "subsubsection" rb
\\subsubsection`!p snip.rv = match.group(1)`\{$1\}

$0
endsnippet

# [[ Math & LaTeX environments ]]

## Math Environments

context "not_math()"
snippet mk "Inline Math" wA
\$${1:${VISUAL}}\$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

context "not_math()"
snippet dm "Display Math" bA
\\[ ${1:${VISUAL}} .\\]
$0
endsnippet

## \begin{} - \end{} Environments

snippet beg "begin{} / end{}"
\\begin\{$1\}
	${VISUAL}$0
\\end\{$1\}
endsnippet

context "not_math()"
snippet def ";definition"
\\begin\{definition\}
	${VISUAL}$1
\\end\{definition\}
$0
endsnippet

context "not_math()"
snippet 'th(eore)?m' "theorem" r
\\begin\{theorem\}
	${VISUAL}$1
\\end\{theorem\}
endsnippet

context "not_math()"
snippet prop "proposition"
\\begin\{proposition\}
	${VISUAL}$1
\\end\{proposition\}
$0
endsnippet

context "not_math()"
snippet 'lem(ma)?' "lemma" r
\\begin\{lemma\}
	${VISUAL}$1
\\end\{lemma\}
$0
endsnippet

context "not_math()"
snippet proof "proof"
\\begin\{proof\}
	${VISUAL}$1
\\end\{proof\}
$0
endsnippet

context "not_math()"
snippet 'ex(a)?m' "example" r
\\begin\{example\}
	${VISUAL}$1
\\end\{example\}
$0
endsnippet

context "not_math()"
snippet rem "remark"
\\begin\{remark\}
	${VISUAL}$1
\\end\{remark\}
$0
endsnippet

snippet 'eqn(\*?)' "equation" r
\\begin\{equation`!p snip.rv = match.group(1)`\}\\label\{$1\}
	${2:${VISUAL}}
\\end\{equation`!p snip.rv = match.group(1)`\}
$0
endsnippet

context "math()"
snippet align "align"
\\begin\{align\}
	${VISUAL}$1
\\end\{align\}
endsnippet

### Align equal sign
context "env('align')"
snippet == "&=" iA
&= $1 \\\\
endsnippet

context "math()"
snippet cases "cases"
\\begin\{cases\}
	${VISUAL}$1
\\end\{cases\}
endsnippet

context "not_math()"
snippet enum "enumerate"
\\begin\{enumerate\}
	\\item ${1:${VISUAL}} \\\\$2
\\end\{enumerate\}
endsnippet

context "not_math()"
snippet item "itemize"
\\begin\{itemize\}
	\\item ${1:${VISUAL}} \\\\$2
\\end\{itemize\}
endsnippet

context "env('itemize') or env('enumerate')"
snippet ii "item" wA
\\item $1 \\\\
endsnippet

context "math()"
snippet array "array" 
\\begin\{array\}
	${VISUAL}$1
\\end\{array\}
endsnippet

## Text Environments in Math Mode

context "math()"
snippet " "\text" wA 
\\text\{$1\} $0
endsnippet

## Miscellaneous Environments

snippet table "Table environment" b
\\begin\{table\}[${1:htpb}]
	\\centering
	\\caption\{${2:caption}\}
	\\label\{tab:${3:label}\}
	\\begin\{tabular\}\{${5:c}\}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\\end\{tabular\}
\\end\{table}
endsnippet

snippet fig "Figure environment" b
\\begin\{figure\}[${1:htpb}]
	\\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\\caption\{${4:$3}\}
	\\label\{fig:${5:${3/\W+/-/g}}\}
\\end\{figure\}
endsnippet

snippet desc "Description" b
\\begin\{description\}
	\\item[$1] $0
\\end\{description\}
endsnippet

# [[ Sub- & Superscripts ]]

context "math()"
snippet _ "subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

# context "math()"
# snippet '([A-Za-z])([A-Za-z]{2})' "auto single subscript" wrA
# `!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
# endsnippet

context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet ^ "[t]o the [p]ower ..." iA
^{$1}$0
endsnippet

context "math()"
snippet sr "^2" iA
^2 $0
endsnippet

context "math()"
snippet cb "^3" iA
^3 $0
endsnippet

context "math()"
snippet comp "[comp]lement" iA
^{c} $0
endsnippet

context "math()"
snippet inv "[inv]erse" iA
^{-1} $0
endsnippet

context "math()"
snippet conj "[conj]ugate (^*)" iA
^{*} $0
endsnippet

# [[ Fractions ]]

priority 10
context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

priority 5
context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

# priority 0
# context "math()"
# snippet / "Fraction" iA
# \\frac{${VISUAL}}{$1}$0
# endsnippet

# [[ Postfix Snippets ]]

priority 100
context "math()"
snippet '([A-Za-z]),.' "vec" riA
\\vec\{`!p snip.rv = match.group(1) `\}
endsnippet

priority 100
context "math()"
snippet '([A-Za-z]).,' "vec" riA
\\vec\{`!p snip.rv = match.group(1) `\}
endsnippet

priority 10
context "math()"
snippet 'hat' "hat" iA
\\hat\{$1\}
endsnippet

priority 100
context "math()"
snippet '([A-Za-z])hat' "hat" riA
\\hat\{`!p snip.rv = match.group(1) `\}
endsnippet

priority 10
context "math()"
snippet 'bar' "overline" iA
\\overline\{$1\}
endsnippet

priority 100
context "math()"
snippet '([A-Za-z])bar' "overline" riA
\\overline\{`!p snip.rv = match.group(1) `\}
endsnippet

priority 10
context "math()"
snippet 'dot' "dot" iA
\\dot\{$1\}
endsnippet

priority 100
context "math()"
snippet '([A-Za-z])dot' "dot" riA
\\dot\{`!p snip.rv = match.group(1) `\}
endsnippet

priority 10
context "math()"
snippet 'ddot' "ddot" iA
\\ddot\{$1\}
endsnippet

priority 100
context "math()"
snippet '([A-Za-z])ddot' "ddot" riA
\\ddot\{`!p snip.rv = match.group(1) `\}
endsnippet

priority 10
context "math()"
snippet 'tilde' "tilde" iA
\\tilde\{$1\}
endsnippet

priority 100
context "math()"
snippet '([A-Za-z])tilde' "tilde" riA
\\tilde\{`!p snip.rv = match.group(1) `\}
endsnippet

priority 10
context "math()"
snippet 'und' "underline" iA
\\underline\{$1\}
endsnippet

priority 100
context "math()"
snippet '([A-Za-z])und' "underline" riA
\\underline\{`!p snip.rv = match.group(1) `\}
endsnippet

# [[ Brackets ]]

priority 0
context "math()"
snippet ang "angle brackets" wA
\\langle $1 \\rangle $0
endsnippet

context "math()"
snippet abs "absolute value" wA 
\\lvert $1 \\rvert $0
endsnippet

context "math()"
snippet norm "norm" wA 
\\lVert $1 \\rVert $0
endsnippet

context "math()"
snippet ceil "ceiling" wA 
\\lceil $1 \\rceil $0
endsnippet

context "math()"
snippet floor "floor" wA 
\\lfloor $1 \rfloor $0
endsnippet

snippet ( "round brackets" iA 
(${1:${VISUAL}})$0
endsnippet

snippet { "angle brackets" iA 
{${1:${VISUAL}}}$0
endsnippet

snippet [ "square brackets" iA 
[${1:${VISUAL}}]$0
endsnippet

context "math()"
snippet lr( "left-right round brackets" wA 
\\left( ${1:${VISUAL}} \\right) $0
endsnippet

context "math()"
snippet lr{ "left-right angle brackets" wA 
\\left\{ ${1:${VISUAL}} \\right\} $0
endsnippet

context "math()"
snippet lr[ "left-right square brackets" wA 
\\left[ ${1:${VISUAL}} \\right] $0
endsnippet

# [[ Linear algebra  ]]

context "math()"
snippet '(?<!\\)(det)' "det -> \det" rwA
\\`!p snip.rv = match.group(1)`($1) $0
endsnippet

context "math()"
snippet trace "trace" wA
\\mathrm\{tr\} $0
endsnippet

context "math()"
snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${3:n} \end{pmatrix}
endsnippet

# [[ Common Functions ]]

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|tan|cot|csc|sec|ln|log|exp)' "function -> \funvtion" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi)' "function -> \function" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

# [[ math*{ } ]]

priority 0
context "math()"
snippet mbf "mathbf" wA 
\\mathbf\{$1\}
endsnippet

context "math()"
snippet mrm "mathrm" wA 
\\mathrm\{$1\}
endsnippet

context "math()"
snippet mbb "mathbb" wA
\\mathbb\{$1\}
endsnippet

context "math()"
snippet mcal "mathcal" wA
\\mathcal\{$1\}
endsnippet

context "math()"
snippet mfrak "mathfrak" wA
\\mathfrak\{$1\}
endsnippet

context "math()"
snippet mscr "mathsct" wA
\\mathscr\{$1\}
endsnippet

## Common Stylized Letters

context "math()"
snippet RR "\R" iA
\\R
endsnippet

context "math()"
snippet NN "\N" iA
\\N
endsnippet

context "math()"
snippet CC "\C" iA
\\C
endsnippet

context "math()"
snippet QQ "\Q" iA
\\Q
endsnippet

context "math()"
snippet HH "H" iA
\\H
endsnippet

context "math()"
snippet DD "D" iA
\\D
endsnippet

context "math()"
snippet SS "\S" iA
\\S
endsnippet

context "math()"
snippet LL "\L" iA
\\L
endsnippet

context "math()"
snippet XX "\X" iA
\\X
endsnippet

# [[ Symbols ]]

priority 10
context "math()"
snippet lll "ell" iA
\\ell
endsnippet

context "math()"
snippet ... "ldots" iA
\\ldots $0
endsnippet

## Equivalence, Inequalities & Implications

priority 0
context "math()"
snippet isom "isomorphic" wA
\\sim=
endsnippet

context "math()"
snippet sim "similar to" wA
\\sim
endsnippet

context "math()"
snippet iff "iff" wA
\\iff 
endsnippet

context "math()"
snippet => "implies" wA
\\implies
endsnippet

context "math()"
snippet =< "implied by" wA
\\impliedby
endsnippet

context "math()"
snippet doteq "defining equality" wA
\\doteq
endsnippet

context "math()"
snippet neq "not equal" wA
\\neq
endsnippet

context "math()"
snippet leq "leq" wA
\\leq 
endsnippet

context "math()"
snippet geq "geq" wA
\\geq 
endsnippet

context "math()"
snippet >> ">>" wA
\gg
endsnippet

context "math()"
snippet << "<<" wA
\ll
endsnippet

## Sets & Logic

context "math()"
snippet EE "geq" iA
\\exists 
endsnippet

context "math()"
snippet AA "forall" iA
\\forall 
endsnippet

context "math()"
snippet set "\{ \}" wA
\\\{ $1 \\\}
endsnippet

context "math()"
snippet inn "/in" iA
\\in
endsnippet

context "math()"
snippet nni "\ni" iA
\\ni
endsnippet

context "math()"
snippet notin "not in " iA
\\not\\in 
endsnippet

context "math()"
snippet || "mid" iA
\\mid 
endsnippet

context "math()"
snippet OO "empty set" wA
\\emptyset 
endsnippet

context "math()"
snippet uu "cup" wA
\\cup 
endsnippet

context "math()"
snippet nn "cap" wA
\\cap
endsnippet

context "math()"
snippet cup "beg cup" wA
\\bigcup_\{${1:i=1}\}^\{${2:\infty}\} 
endsnippet

context "math()"
snippet cap "big cap" wA
\\bigcap_\{${1:i=1}\}^\{${2:\infty}\} 
endsnippet

context "math()"
snippet cc "subset" wA
\\subseteq
endsnippet

context "math()"
snippet \\ "setminus" iA
\\setminus 
endsnippet

## Functions & Maps

context "math()"
snippet to "\to" wA
\\to 
endsnippet

context "math()"
snippet maps "\mapsto" wA
\\mapsto
endsnippet

context "math()"
snippet ff "function definition" wA
${1:f} \\colon ${2:M} \\to ${3:\\R}
endsnippet

## Operations

context "math()"
snippet +- "plus-minus" iA
\\pm 
endsnippet

context "math()"
snippet -+ "minus-plus" iA
\\mp 
endsnippet

priority 20
context "math()"
snippet '(?<!i)cdot' "\cdot" riA
\\cdot 
endsnippet

priority 0
context "math()"
snippet xx "cross" iA
\\times 
endsnippet

priority 10
context "math()"
snippet oxx "otimes" iA
\\otimes 
endsnippet

priority 0
context "math()"
snippet o+ "oplus" iA
\\oplus 
endsnippet

context "math()"
snippet sum "sum" wA
\\sum_\{${1:k=1}\}^\{${2:\infty}\} ${3:${VISUAL}} $0
endsnippet

context "math()"
snippet prod "product" wA
\\prod_\{${1:n=${2:1}}\}^\{${3:\infty}\} ${4:${VISUAL}} $0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\\sqrt\{${1:${VISUAL}}\} $0
endsnippet

## Calculus

context "math()"
snippet taylor "taylor" wA
\\sum_\{${1:k}=${2:0}\}^\{${3:\infty}\} ${4:c_$1} (x-a)^$1 $0
endsnippet

context "math()"
snippet "lim " "limit" wrA
\\lim_\{${1:n} \\to ${2:\infty}\} ${3:${VISUAL}} $0
endsnippet

context "math()"
snippet limsup "limsup" wA
\\limsup_\{${1:n} \\to ${2:\infty}\} ${3:${VISUAL}} $0
endsnippet

context "math()"
snippet liminf "liminf" wA
\\liminf_\{${1:n} \\to ${2:\infty}\} ${3:${VISUAL}} $0
endsnippet

context "math()"
snippet ooo "\infty" iA
\\infty
endsnippet

context "math()"
snippet seq "sequence" iA
(${1:x}_${2:n})_\{${3:$2}\\in${4:\\mathbb\{N\}}\} $0
endsnippet

## Derivatives & Integrals

context "math()"
snippet part "partial (del)" wA
\\partial_\{$1\} $0
endsnippet

context "math()"
snippet par "partial derivative"
\\frac\{ \\partial $1 \}\{ \\partial ${2:x} \} $0
endsnippet

context "math()"
snippet "(nabla) " "nabla" rA
\\nabla_\{$1\} $0
endsnippet

context "math()"
snippet 'nabla([A-Za-z])' "nabla^{}" rA
\\nabla^\{`!p snip.rv = match.group(1)`\}_\{$1\} $0
endsnippet

context "math()"
snippet int "integral" wA
\\ins_\{$1\} $0
endsnippet

context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

# [[ Greek Letters ]]

## These snippets are matched with the letters on the greek keyboard
## They expand appropriately both in text and math mode
## Use the 'let' and 'clet' snippets to modify them, see 'snippets.snippets'

priority 100
context "math()"
snippet ;a ";a -> \alpha in math" iA
\\alpha$0
endsnippet

context "not_math()"
snippet ;a ";a -> $\alpha$ in text" wA
\$\\alpha\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

context "math()"
snippet ;b ";b -> \beta in math" iA
\\beta$0
endsnippet

context "not_math()"
snippet ;b ";b -> $\beta$ in text" wA
\$\\beta\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

context "math()"
snippet ;g ";g -> \gamma in math" iA
\\gamma$0
endsnippet

context "not_math()"
snippet ;g ";g -> $\gamma$ in text" wA
\$\\gamma\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

context "math()"
snippet ;G ";G -> Gamma" iA
\\Gamma$0
endsnippet

context "not_math()"
snippet ;G ";G -> $\Gamma$ in text" wA
\$\\Gamma\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

context "math()"
snippet ;d ";d -> \delta in math" iA
\\delta$0
endsnippet

context "not_math()"
snippet ;d ";d -> $\delta$ in text" wA
\$\\delta\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

context "math()"
snippet ;D ";D -> Delta" iA
\\Delta$0
endsnippet

context "not_math()"
snippet ;D ";D -> $\Delta$ in text" wA
\$\\Delta\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

context "math()"
snippet ;e ";e -> \varepsilon in math" iA
\\varepsilon$0
endsnippet

context "not_math()"
snippet ;e ";e -> $\varepsilon$ in text" wA
\$\\varepsilon\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

context "math()"
snippet ;z ";z -> \zeta in math" iA
\\zeta$0
endsnippet

context "not_math()"
snippet ;z ";z -> $\zeta$ in text" wA
\$\\zeta\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

context "math()"
snippet ;h ";h -> \eta in math" iA
\\eta$0
endsnippet

context "not_math()"
snippet ;h ";h -> $\eta$ in text" wA
\$\\eta\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

context "math()"
snippet ;u ";u -> \theta in math" iA
\\theta$0
endsnippet

context "not_math()"
snippet ;u ";u -> $\theta$ in text" wA
\$\\theta\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

context "math()"
snippet ;U ";U -> Theta" iA
\\Theta$0
endsnippet

context "not_math()"
snippet ;U ";U -> $\Theta$ in text" wA
\$\\Theta\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

context "math()"
snippet ;i ";i -> \iota in math" iA
\\iota$0
endsnippet

context "not_math()"
snippet ;i ";i -> $\iota$ in text" wA
\$\\iota\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

context "math()"
snippet ;k ";k -> \kappa in math" iA
\\kappa$0
endsnippet

context "not_math()"
snippet ;k ";k -> $\kappa$ in text" wA
\$\\kappa\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

context "math()"
snippet ;l ";l -> \lambda in math" iA
\\lambda$0
endsnippet

context "not_math()"
snippet ;l ";l -> $\lambda$ in text" wA
\$\\lambda\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

context "math()"
snippet ;L ";L -> Lambda" iA
\\Lambda$0
endsnippet

context "not_math()"
snippet ;L ";L -> $\Lambda$ in text" wA
\$\\Lambda\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

context "math()"
snippet ;m ";m -> \mu in math" iA
\\mu$0
endsnippet

context "not_math()"
snippet ;m ";m -> $\mu$ in text" wA
\$\\mu\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

context "math()"
snippet ;n ";n -> \nu in math" iA
\\nu$0
endsnippet

context "not_math()"
snippet ;n ";n -> $\nu$ in text" wA
\$\\nu\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

context "math()"
snippet ;j ";j -> \xi in math" iA
\\xi$0
endsnippet

context "not_math()"
snippet ;j ";j -> $\xi$ in text" wA
\$\\xi\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

context "math()"
snippet ;J ";J -> Xi" iA
\\Xi$0
endsnippet

context "not_math()"
snippet ;J ";J -> $\Xi$ in text" wA
\$\\Xi\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

context "math()"
snippet ;p ";p -> \pi in math" iA
\\pi$0
endsnippet

context "not_math()"
snippet ;p ";p -> $\pi$ in text" wA
\$\\pi\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

context "math()"
snippet ;P ";P -> Pi" iA
\\Pi$0
endsnippet

context "not_math()"
snippet ;P ";P -> $\Pi$ in text" wA
\$\\Pi\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

context "math()"
snippet ;r ";r -> \rho in math" iA
\\rho$0
endsnippet

context "not_math()"
snippet ;r ";r -> $\rho$ in text" wA
\$\\rho\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

context "math()"
snippet ;s ";s -> \sigma in math" iA
\\sigma$0
endsnippet

context "not_math()"
snippet ;s ";s -> $\sigma$ in text" wA
\$\\sigma\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

context "math()"
snippet ;S ";S -> Sigma" iA
\\Sigma$0
endsnippet

context "not_math()"
snippet ;S ";S -> $\Sigma$ in text" wA
\$\\Sigma\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

context "math()"
snippet ;t ";t -> \tau in math" iA
\\tau$0
endsnippet

context "not_math()"
snippet ;t ";t -> $\tau$ in text" wA
\$\\tau\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

context "math()"
snippet ;f ";f -> \phi in math" iA
\\phi$0
endsnippet

context "not_math()"
snippet ;f ";f -> $\phi$ in text" wA
\$\\phi\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

context "math()"
snippet ;F ";F -> Phi" iA
\\Phi$0
endsnippet

context "not_math()"
snippet ;F ";F -> $\Phi$ in text" wA
\$\\Phi\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

context "math()"
snippet ;x ";x -> \chi in math" iA
\\chi$0
endsnippet

context "not_math()"
snippet ;x ";x -> $\chi$ in text" wA
\$\\chi\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

context "math()"
snippet ;c ";c -> \psi in math" iA
\\psi$0
endsnippet

context "not_math()"
snippet ;c ";c -> $\psi$ in text" wA
\$\\psi\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

context "math()"
snippet ;C ";C -> Psi" iA
\\Psi$0
endsnippet

context "not_math()"
snippet ;C ";C -> $\Psi$ in text" wA
\$\\Psi\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

context "math()"
snippet ;v ";v -> \omega in math" iA
\\omega$0
endsnippet

context "not_math()"
snippet ;v ";v -> $\omega$ in text" wA
\$\\omega\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

context "math()"
snippet ;V ";V -> Omega" iA
\\Omega$0
endsnippet

context "not_math()"
snippet ;V ";V -> $\Omega$ in text" wA
\$\\Omega\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

context "math()"
snippet ome ";ome -> \omega in math" iA
\\omega$0
endsnippet

context "not_math()"
snippet ome ";ome -> $\omega$ in text" wA
\$\\omega\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

context "math()"
snippet Ome ";Ome -> Omega" iA
\\Omega$0
endsnippet

context "not_math()"
snippet Ome ";Ome -> $\Omega$ in text" wA
\$\\Omega\$`!p
if t[1] and t[1][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$1
endsnippet

# [[ Matrix Environments ]]

priority 0
snippet pmat "pmatrix"
\\begin{pmatrix}
	$1
\\end{pmatrix}
$0
endsnippet

snippet bmat "bmatrix"
\\begin{bmatrix}
	$1
\\end{bmatrix}
$0
endsnippet

snippet Bmat "Bmatrix"
\\begin{Bmatrix}
	$1
\\end{Bmatrix}
$0
endsnippet

snippet Vmat "Vmatrix"
\\begin{Vmatrix}
	$1
\\end{Vmatrix}
$0
endsnippet

snippet matrix "matrix"
\\begin{matrix}
	$1
\\end{matrix}
$0
endsnippet

# [[ Visual Operations ]]

context "math()"
snippet under "underbrace" w
\\inderbrace\{ ${VISUAL} \}_\{$1\} 
endsnippet

context "math()"
snippet over "overbrace" w
\\overbrace\{ ${VISUAL} \}^\{$1\}
endsnippet

context "math()"
snippet cancel "cancel" w
\\cancel\{ ${VISUAL} \}
endsnippet

context "math()"
snippet cancelto "cancelto" w
\\cancelto\{ ${VISUAL} \}
endsnippet

context "math()"
snippet color "color" w
\{\\color\{$1\} ${VISUAL} \}
endsnippet

# [[ Misc ]]

## Automatically turn single letters in text except [A,a,I] into math
## We want this NOT to happen in math mode
context "not_math()"
snippet '([^'])\b([B-HJ-Zb-z])\b([\n\s.,?!:'])' "letter -> math" riA
`!p snip.rv = match.group(1)`\$`!p snip.rv = match.group(2)`\$`!p snip.rv = match.group(3)`
endsnippet

## Automatically turn greek letters in text into math
## We (again) want this NOT to happen in math mode
context "not_math()"
snippet '([^'])\b(alpha|beta|[Gg]amma|[Dd]elta|varepsilon|zeta|eta|[Tt]heta|iota|[Kk]appa|[Ll]ambda)\b([\n\s.,?!:'])' "greek -> math" riA
`!p snip.rv = match.group(1)`\$\\`!p snip.rv = match.group(2)`\$`!p snip.rv = match.group(3)`
endsnippet

context "not_math()"
snippet '([^'])\b(mu|nu|[Xx]i|[Pp]i|rho|[Ss]igma|tau|[Pp]hi|chi|[Pp]si|[Oo]mega)\b([\n\s.,?!:'])' "greek -> math" riA
`!p snip.rv = match.group(1)`\$\\`!p snip.rv = match.group(2)`\$`!p snip.rv = match.group(3)`
endsnippet

# [[ Evaluate math expressions with SymPy ]]

context "math()"
snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

priority 10000
context "math()"
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p 
rom sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet
