# Global python scripts
global !p

def math():
  return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def not_math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '0'

def trailing_space_inline(t,n):
	if t[n] and t[n][0] not in [',', '.', '?', '-', ' ']:
		return ' '
	else:
		return ''

import re
def trailing_space_letter(t,n):
	if t[n] and re.match(r'[a-zA-Zα-ωΑ-Ω]', t[n][0]):
		return ' '
	else:
		return ''

endglobal

# [[ Greek Letters ]]

# These snippets are matched with the letters on the greek keyboard
# They expand appropriately both in text and math mode
# Use the 'let' and 'clet' snippets to modify them, see 'snippets.snippets'

priority 100
context "math()"
snippet ;a ";a -> \alpha in math" iA
\\alpha`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet ;a ";a -> $\alpha$ in text" wA
\$\\alpha\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet ;b ";b -> \beta in math" iA
\\beta`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet ;b ";b -> $\beta$ in text" wA
\$\\beta\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet ;g ";g -> \gamma in math" iA
\\gamma`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet ;g ";g -> $\gamma$ in text" wA
\$\\gamma\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet ;G ";G -> Gamma" iA
\\Gamma`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet ;G ";G -> $\Gamma$ in text" wA
\$\\Gamma\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet ;d ";d -> \delta in math" iA
\\delta`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet ;d ";d -> $\delta$ in text" wA
\$\\delta\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet ;D ";D -> Delta" iA
\\Delta`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet ;D ";D -> $\Delta$ in text" wA
\$\\Delta\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet ;e ";e -> \epsilon in math" iA
\\epsilon`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet ;e ";e -> $\epsilon$ in text" wA
\$\\epsilon\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet ;z ";z -> \zeta in math" iA
\\zeta`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet ;z ";z -> $\zeta$ in text" wA
\$\\zeta\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet ;h ";h -> \eta in math" iA
\\eta`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet ;h ";h -> $\eta$ in text" wA
\$\\eta\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet ;u ";u -> \theta in math" iA
\\theta`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet ;u ";u -> $\theta$ in text" wA
\$\\theta\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet ;U ";U -> Theta" iA
\\Theta`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet ;U ";U -> $\Theta$ in text" wA
\$\\Theta\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet ;i ";i -> \iota in math" iA
\\iota`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet ;i ";i -> $\iota$ in text" wA
\$\\iota\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet ;k ";k -> \kappa in math" iA
\\kappa`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet ;k ";k -> $\kappa$ in text" wA
\$\\kappa\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet ;l ";l -> \lambda in math" iA
\\lambda`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet ;l ";l -> $\lambda$ in text" wA
\$\\lambda\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet ;L ";L -> Lambda" iA
\\Lambda`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet ;L ";L -> $\Lambda$ in text" wA
\$\\Lambda\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet ;m ";m -> \mu in math" iA
\\mu`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet ;m ";m -> $\mu$ in text" wA
\$\\mu\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet ;n ";n -> \nu in math" iA
\\nu`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet ;n ";n -> $\nu$ in text" wA
\$\\nu\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet ;j ";j -> \xi in math" iA
\\xi`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet ;j ";j -> $\xi$ in text" wA
\$\\xi\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet ;J ";J -> Xi" iA
\\Xi`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet ;J ";J -> $\Xi$ in text" wA
\$\\Xi\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet ;p ";p -> \pi in math" iA
\\pi`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet ;p ";p -> $\pi$ in text" wA
\$\\pi\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet ;P ";P -> Pi" iA
\\Pi`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet ;P ";P -> $\Pi$ in text" wA
\$\\Pi\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet ;r ";r -> \rho in math" iA
\\rho`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet ;r ";r -> $\rho$ in text" wA
\$\\rho\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet ;s ";s -> \sigma in math" iA
\\sigma`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet ;s ";s -> $\sigma$ in text" wA
\$\\sigma\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet ;S ";S -> Sigma" iA
\\Sigma`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet ;S ";S -> $\Sigma$ in text" wA
\$\\Sigma\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet ;t ";t -> \tau in math" iA
\\tau`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet ;t ";t -> $\tau$ in text" wA
\$\\tau\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet ;f ";f -> \phi in math" iA
\\phi`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet ;f ";f -> $\phi$ in text" wA
\$\\phi\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet ;F ";F -> Phi" iA
\\Phi`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet ;F ";F -> $\Phi$ in text" wA
\$\\Phi\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet ;x ";x -> \chi in math" iA
\\chi`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet ;x ";x -> $\chi$ in text" wA
\$\\chi\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet ;c ";c -> \psi in math" iA
\\psi`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet ;c ";c -> $\psi$ in text" wA
\$\\psi\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet ;C ";C -> Psi" iA
\\Psi`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet ;C ";C -> $\Psi$ in text" wA
\$\\Psi\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet ;v ";v -> \omega in math" iA
\\omega`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet ;v ";v -> $\omega$ in text" wA
\$\\omega\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet ;V ";V -> Omega" iA
\\Omega`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet ;V ";V -> $\Omega$ in text" wA
\$\\Omega\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet ome ";ome -> \omega in math" iA
\\omega`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet ome ";ome -> $\omega$ in text" wA
\$\\omega\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet Ome ";Ome -> Omega" iA
\\Omega`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet Ome ";Ome -> $\Omega$ in text" wA
\$\\Omega\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

# Variant letters

context "math()"
snippet :e ":e -> \varepsilon in math" iA
\\varepsilon`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet :e ":e -> $\varepsilon$ in text" wA
\$\\varepsilon\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet :u ":u -> \vartheta in math" iA
\\vartheta`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet :u ":u -> $\vartheta$ in text" wA
\$\\vartheta\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet :p ":p -> \varpi in math" iA
\\varpi`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet :p ":p -> $\varpi$ in text" wA
\$\\varpi\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet :r ":r -> \varrho in math" iA
\\varrho`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet :r ":r -> $\varrho$ in text" wA
\$\\varrho\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet :sigma ":sigma -> \varsigma in math" iA
\\varsigma`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet :sigma ":sigma -> $\varsigma$ in text" wA
\$\\varsigma\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "math()"
snippet :phi ":phi -> \varphi in math" iA
\\varphi`!p snip.rv = trailing_space_letter(t,0)`$0
endsnippet

context "not_math()"
snippet :phi ":phi -> $\varphi$ in text" wA
\$\\varphi\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

