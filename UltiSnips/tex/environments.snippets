# Global python scripts
global !p

def math():
  return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def not_math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '0'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')")
	return x != '0' and y != '0'
	## Use backticks when calling: e.g. env('itemize')

def trailing_space_inline(t,n):
	if t[n] and t[n][0] not in [',', '.', '?', '-', ' ']:
		return ' '
	else:
		return ''

import re
def trailing_space_letter(t,n):
	if t[n] and re.match(r'[a-zA-Zα-ωΑ-Ω]', t[n][0]):
		return ' '
	else:
		return ''

def trailing_space(t,n):
	if t[n] and t[n][0] not in [' ']:
		return ' '
	else:
		return ''

endglobal

# [[ Math & LaTeX environments ]]

## Math Environments

context "not_math()"
snippet '(mk|μκ)' "Inline Math" rwA
\$${1:${VISUAL}}\$`!p snip.rv = trailing_space_inline(t,0)`$0
endsnippet

context "not_math()"
snippet '(dm|δμ)' "Display Math" rbA
\\[ ${1:${VISUAL}} \\]$0
endsnippet

## \begin{} - \end{} Environments

snippet '(beg|βεγ)' "begin{} / end{}" r
\\begin\{$1\}${2:\\label\{${3: }\}}
	${VISUAL}$0
\\end\{$1\}
endsnippet

context "not_math()"
snippet '(def|δεφ)' "definition" rb
\\begin\{definition\}${1:\\label\{${2: }\}}
	${VISUAL}$0
\\end\{definition\}
endsnippet

context "not_math()"
snippet '(thm|τημ)' "theorem" rb
\\begin\{theorem\}${1:\\label\{${2: }\}}
	${VISUAL}$0
\\end\{theorem\}
endsnippet

context "not_math()"
snippet '(prop|προπ)' "proposition" rb
\\begin\{proposition\}${1:\\label\{${2: }\}}
	${VISUAL}$0
\\end\{proposition\}
endsnippet

context "not_math()"
snippet '(lem|λεμ)' "lemma" rb
\\begin\{lemma\}${1:\\label\{${2: }\}}
	${VISUAL}$0
\\end\{lemma\}
endsnippet

context "not_math()"
snippet '(proof|προοφ)' "proof" rb
\\begin\{proof\}
	${VISUAL}$0
\\end\{proof\}
endsnippet

context "not_math()"
snippet '(ex|εχ)' "example" rb
\\begin\{example\}${1:\\label\{${2: }\}}
	${VISUAL}$0
\\end\{example\}
endsnippet

context "not_math()"
snippet '(rem|ρεμ)' "remark" rb
\\begin\{remark\}${1:\\label\{${2: }\}}
	${VISUAL}$0
\\end\{remark\}
endsnippet

context "not_math()"
snippet '(eqn|ε;ν)(\*?)' "equation" r
\\begin\{equation`!p snip.rv = match.group(2)`\}\\label\{$1\}
	${2:${VISUAL}}
\\end\{equation`!p snip.rv = match.group(2)`\}
endsnippet

context "not_math()"
snippet '(align|αλιγν)(\*?)' "align" r
\\begin\{align`!p snip.rv = match.group(2)`\}
	${VISUAL}$0
\\end\{align`!p snip.rv = match.group(2)`\}
endsnippet

### Align equal sign
context "env('align')"
snippet == "&=" iA
&= $1 \\\\
endsnippet

context "math()"
snippet '(cases|ψασεσ)' "cases" r
\\begin\{cases\}
	${VISUAL}$0
\\end\{cases\}
endsnippet

context "not_math()"
snippet '(enum|ενθμ)' "enumerate" r
\\begin\{enumerate\}
	\\item ${1:${VISUAL}} \\\\$2
\\end\{enumerate\}
endsnippet

context "not_math()"
snippet '(item|ιτεμ)' "itemize" r
\\begin\{itemize\}
	\\item ${1:${VISUAL}} \\\\$2
\\end\{itemize\}
endsnippet

context "env('itemize') or env('enumerate')"
snippet '(ii|ιι)' "item" rwA
\\item $1 \\\\
endsnippet

context "math()"
snippet '(array|αρραυ)' "array" r
\\begin\{array\}
	${VISUAL}$0
\\end\{array\}
endsnippet

context "not_math()"
snippet '(exer|εχερ)' "exercise" rb
\\begin\{exercise\}
	$1
\\end\{exercise\}
endsnippet

## Miscellaneous Environments

snippet '(table|ταβλε)' "Table environment" rb
\\begin\{table\}[${1:htpb}]
	\\centering
	\\caption\{${2:caption}\}
	\\label\{tab:${3:label}\}
	\\begin\{tabular\}\{${5:c}\}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\\end\{tabular\}
\\end\{table}
endsnippet

snippet '(fig|φιγ)' "Figure environment" rb
\\begin\{figure\}[${1:htpb}]
	\\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\\caption\{${4:$3}\}
	\\label\{fig:${5:${3/\W+/-/g}}\}
\\end\{figure\}
endsnippet

snippet '(desc|δεσψ)' "Description" rb
\\begin\{description\}
	\\item[$1] $0
\\end\{description\}
endsnippet

## Matrix Environments

snippet '([pbBV]?)mat' "pmatrix" r
\\begin{`!p snip.rv = match.group(1)`matrix}
	$1
\\end{`!p snip.rv = match.group(1)`matrix}
$0
endsnippet

## Text Environments in Math Mode

priority 10
context "math()"
snippet " "\text" wA
\\quad\\text\{$1\}\\quad $0
endsnippet

